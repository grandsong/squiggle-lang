let {console} = global

def foldRight(xs, z, f) =
    def g(acc, x, _, _) = f(x, acc)
    let [...ys] = xs
    in ys.reverse().reduce(g, z)

def Node(x, l, r) = {
    type: "Node",
    data: x,
    left: l,
    right: r
}

let Tip = {type: "Tip"}

def leaf(x) =
    Node(x, Tip, Tip)

# This actually doesn't end up looking much better with pattern matching since
# we need to make the "less-than" check on the data.
def bstAdd(n, d) =
    if n == Tip then
        leaf(d)
    else if d < n.data then
        Node(n.data, bstAdd(n.left, d), n.right)
    else
        Node(n.data, n.left, bstAdd(n.right, d))

def inOrder(node) =
    match node
    case {type: "Tip"} =>
        []
    case {type: "Node", left, right, data} =>
        inOrder(left) ++ [data] ++ inOrder(right)

def treeFolder(x, node) =
    bstAdd(node, x)

let root = foldRight([4, 2, 1, 3, 6, 5, 7], Tip, treeFolder)

in console.log(inOrder(root))
