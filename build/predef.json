"// TODO: Add arity checking.\n// TODO: Add type checking.\n\n// MDN polyfill for `Object.is`.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\nvar $_is = Object.is || function(x, y) {\n    // SameValue algorithm\n    if (x === y) { // Steps 1-5, 7-10\n        // Steps 6.b-6.e: +0 != -0\n        return x !== 0 || 1 / x === 1 / y;\n    } else {\n        // Step 6.a: NaN == NaN\n        return x !== x && y !== y;\n    }\n};\nvar $is = function(a, b) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to $is');\n    }\n    return $_is(a, b);\n};\n\nvar $Object = Object;\nvar $preventExtensions = Object.preventExtensions;\nvar $isFrozen = Object.isFrozen;\nvar $freeze = Object.freeze;\nvar $create = Object.create;\nvar $isArray = Array.isArray;\nvar $keys = Object.keys;\nvar $isArray = Array.isArray;\nvar $getPrototypeOf = Object.getPrototypeOf;\nvar $Error = Error;\nvar $ReferenceError = ReferenceError;\nvar $undef = {_: \"SQUIGGLE_TEMPORAL_DEADZONE_VALUE\"};\n\nvar $has = function $has(obj, key) {\n    return key in obj;\n};\nvar $ref = function $ref(x, name) {\n    if (x === $undef) {\n        throw new $ReferenceError(name + \" used before initialization\");\n    }\n    return x;\n};\nvar $isObject = function(x) {\n    if (arguments.length !== 1) {\n        throw new $Error('wrong number of arguments to $isObject');\n    }\n    return x && typeof x === \"object\";\n};\nvar $slice = function(xs, i) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to $slice');\n    }\n    return Array.prototype.slice.call(xs, i);\n};\nvar $array = function() {\n    return $freeze($slice(arguments, 0));\n};\nvar $lt = function(a, b) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to $lt');\n    }\n    $number(a);\n    $number(b);\n    return a < b;\n};\nvar $gt = function(a, b) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to $gt');\n    }\n    $number(a);\n    $number(b);\n    return a > b;\n};\nvar $lte = function(a, b) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to $lte');\n    }\n    return $lt(a, b) || $eq(a, b);\n};\nvar $gte = function(a, b) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to $gte');\n    }\n    return $gt(a, b) || $eq(a, b);\n};\nvar $neq = function(a, b) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to $neq');\n    }\n    return !$eq(a, b);\n};\nvar $eq = function $eq(a, b) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to $eq');\n    }\n    if (typeof a !== typeof b) {\n        return false;\n    }\n    if (a === b) {\n        return true;\n    }\n    // TODO: `NaN`s should not be equal under `=`, only `is`.\n    if (a !== a && b !== b) {\n        return true;\n    }\n    // TODO: Only check arrays based on their numeric keys.\n    if ($isObject(a) && $isObject(b)) {\n        // TODO: Remove duplicates.\n        var ks = $keys(a).concat($keys(b)).sort();\n        return ks.every(function(k) {\n            return (\n                k in a &&\n                k in b &&\n                $eq(a[k], b[k])\n            );\n        });\n    }\n    return false;\n};\nvar $add = function(a, b) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to $add');\n    }\n    $number(a);\n    $number(b);\n    return a + b;\n};\nvar $concat = function(a, b) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to $concat');\n    }\n    if (typeof a === 'string' && typeof b === 'string') {\n        return a + b;\n    }\n    if ($isArray(a) && $isArray(b)) {\n        return a.concat(b);\n    }\n    throw new $Error('incorrect argument types for ++');\n};\nvar $subtract = function(a, b) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to $subtract');\n    }\n    $number(a);\n    $number(b);\n    return a - b;\n};\nvar $multiply = function(a, b) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to $multiply');\n    }\n    $number(a);\n    $number(b);\n    return a * b;\n};\nvar $divide = function(a, b) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to $divide');\n    }\n    $number(a);\n    $number(b);\n    return a / b;\n};\nvar $not = function(x) {\n    if (arguments.length !== 1) {\n        throw new $Error('wrong number of arguments to $not');\n    }\n    return !$bool(x);\n};\nvar $negate = function(x) {\n    if (arguments.length !== 1) {\n        throw new $Error('wrong number of arguments to $negate');\n    }\n    return -$number(x);\n};\nvar freezeAfter = function(x, f) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to freezeAfter');\n    }\n    f(x);\n    return $freeze(x);\n};\nvar map = function(f, xs) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to map');\n    }\n    var ys = [];\n    for (var i = 0, n = xs.length; i < n; i++) {\n        ys.push(f(xs[i]));\n    }\n    return $freeze(ys);\n};\nvar join = function(items, separator) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to join');\n    }\n    return [].join.call(items, separator);\n};\nvar foldLeft = function(xs, z, f) {\n    if (arguments.length !== 3) {\n        throw new $Error('wrong number of arguments to foldLeft');\n    }\n    var y = z;\n    for (var i = 0, n = xs.length; i < n; i++) {\n        y = f(y, xs[i]);\n    }\n    return y;\n};\nvar fold = foldLeft;\nvar isEmpty = function(xs) {\n    if (arguments.length !== 1) {\n        throw new $Error('wrong number of arguments to isEmpty');\n    }\n    return xs.length === 0;\n};\nvar filter = function(xs, f) {\n    if (arguments.length !== 2) {\n        throw new $Error('wrong number of arguments to filter');\n    }\n    var ys = [];\n    for (var i = 0, n = xs.length; i < n; i++) {\n        if (f(xs[i])) {\n            ys.push(xs[i]);\n        }\n    }\n    return $freeze(ys);\n};\nvar head = function(xs) {\n    if (arguments.length !== 1) {\n        throw new $Error(\"wrong number of arguments to head\");\n    }\n    if (xs.length === 0) {\n        throw new $Error('cannot get head of empty list');\n    }\n    return xs[0];\n};\nvar tail = function(xs) {\n    if (arguments.length !== 1) {\n        throw new $Error(\"wrong number of arguments to tail\");\n    }\n    return $slice(xs, 1);\n};\nvar reduce = function(xs, f) {\n    if (arguments.length !== 2) {\n        throw new $Error(\"wrong number of arguments to reduce\");\n    }\n    return foldLeft(head(xs), tail(xs), f);\n};\nvar foldRight = function(xs, z, f) {\n    if (arguments.length !== 3) {\n        throw new $Error(\"wrong number of arguments to foldRight\");\n    }\n    return foldLeft(reverse(xs), z, flip(f));\n};\nvar reverse = function(xs) {\n    if (arguments.length !== 1) {\n        throw new $Error(\"wrong number of arguments to reverse\");\n    }\n    return toArray(xs).reverse();\n};\nvar toArray = function(xs) {\n    if (arguments.length !== 1) {\n        throw new $Error(\"wrong number of arguments to toArray\");\n    }\n    return $slice(xs, 0);\n};\nvar flip = function(f) {\n    if (arguments.length !== 1) {\n        throw new $Error(\"wrong number of arguments to toString\");\n    }\n    return function(x, y) {\n        return f(y, x);\n    };\n};\nvar toString = function(x) {\n    if (arguments.length !== 1) {\n        throw new $Error(\"wrong number of arguments to toString\");\n    }\n    if (x) {\n        if (x.toString) {\n            return x.toString();\n        } else {\n            return '{WEIRD_OBJECT}';\n        }\n    } else {\n        return '' + x;\n    }\n};\nvar denew = function(Class) {\n    if (arguments.length !== 1) {\n        throw new $Error(\"wrong number of arguments to denew\");\n    }\n    return function WrappedConstructor() {\n        var args = toArray(arguments);\n        var f = Class.bind.apply(Class, [Class].concat(args));\n        return new f;\n    };\n};\nvar $get = function(obj, k) {\n    if (arguments.length !== 2) {\n        throw new $Error(\"wrong number of arguments to get\");\n    }\n    if (obj === null || obj === undefined) {\n        throw new $Error('cannot get ' + k + ' of ' + obj);\n    }\n    if (k in Object(obj)) {\n        return obj[k];\n    }\n    throw new $Error('key ' + k + ' not in ' + toString(obj));\n};\nvar set = function(obj, k, v) {\n    if (arguments.length !== 3) {\n        throw new $Error(\"wrong number of arguments to set\");\n    }\n    if (obj === null || typeof obj !== 'object') {\n        throw new $Error('cannot set ' + k + ' on ' + toString(obj));\n    }\n    if ($isFrozen(obj)) {\n        throw new $Error('cannot set ' + k + ' on frozen object');\n    }\n    obj[k] = v;\n    return obj;\n};\nvar typeOf = function typeOf(x) {\n    if (arguments.length !== 1) {\n        throw new $Error(\"wrong number of arguments to typeOf\");\n    }\n    if (x === null) {\n        return \"null\"\n    }\n    if ($isArray(x)) {\n        return \"array\";\n    }\n    return typeof x;\n};\nvar $method = function(obj, method) {\n    if (arguments.length !== 2) {\n        throw new $Error(\"wrong number of arguments to $method\");\n    }\n    return obj[method].bind(obj);\n};\nvar $update = function(a, b) {\n    if (arguments.length !== 2) {\n        throw new $Error(\"wrong number of arguments to update\");\n    }\n    var c = $create($getPrototypeOf(a));\n    $keys(a).forEach(function(k) { c[k] = a[k]; });\n    $keys(b).forEach(function(k) { c[k] = b[k]; });\n    return $freeze(c);\n};\nvar $object = function() {\n    if (arguments.length % 2 !== 0) {\n        throw new $Error('objects must have an even number of items');\n    }\n    var obj = {};\n    var i = 0;\n    var n = arguments.length - 1;\n    while (i < n) {\n        if (typeof arguments[i] !== \"string\") {\n            throw new $Error(\"object keys must be strings: \" + arguments[i]);\n        }\n        obj[arguments[i]] = arguments[i + 1];\n        i += 2;\n    }\n    return $freeze(obj);\n};\nvar $bool = function(x) {\n    if (arguments.length !== 1) {\n        throw new $Error('wrong number of arguments to $bool');\n    }\n    if (typeof x !== 'boolean') {\n        throw new $Error('not a boolean: ' + toString(x));\n    }\n    return x;\n};\nvar $number = function(x) {\n    if (arguments.length !== 1) {\n        throw new $Error('wrong number of arguments to $number');\n    }\n    if (typeof x !== 'number') {\n        throw new $Error('not a number: ' + toString(x));\n    }\n    return x;\n};\n\nvar undefined = void 0;\nvar global = (1, eval)(\"this\");\n\nvar update = $update;\nvar get = $get;\nvar is = $is;\n"